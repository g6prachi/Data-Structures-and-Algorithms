class Solution {
    public int maxProfit(int k, int[] prices) {
        
        //for k >= prices.length / 2, we can do any number of transactions, hence it acts as k = infinity
        if(k >= prices.length / 2){
            
            int T_ik0 = 0;
            int T_ik1 = Integer.MIN_VALUE;
            
            for(int val : prices){
                
                int temp = T_ik0;
                
                T_ik0 = Math.max(T_ik0, T_ik1 + val);
                T_ik1 = Math.max(T_ik1, temp - val);
            }
            
            return T_ik0;
            
        } else {
            
            int[] T_ik0 = new int[k + 1];
            int[] T_ik1 = new int[k + 1];
            Arrays.fill(T_ik1, Integer.MIN_VALUE);
            
            for(int val : prices){
                for(int j = 1; j <= k; j++){
                
                    T_ik0[j] = Math.max(T_ik0[j], T_ik1[j] + val);
                    T_ik1[j] = Math.max(T_ik1[j], T_ik0[j - 1] - val);
                
                }
            }
            
            return T_ik0[k];
        
        }        
        
    }
}
